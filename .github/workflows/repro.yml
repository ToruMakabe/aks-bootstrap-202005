name: "Repro"
on:
  issues:
    types:
      - labeled
      - unlabeled
defaults:
  run:
    shell: bash

jobs:
  terraform:
    if: github.event.label.name == 'repro'
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      TF_VAR_aks_cluster_name: ${{ github.actor }}-awesome-cluster-repro
      TF_VAR_aks_cluster_rg: rg-aks-awesome-cluster-repro
      TF_VAR_aks_cluster_location: japaneast
      TF_VAR_la_workspace_name: ${{ secrets.LA_WORKSPACE_NAME }}
      TF_VAR_la_workspace_rg: ${{ secrets.LA_WORKSPACE_RG }}
      TF_VAR_enable_flux: true
      TF_VAR_git_authuser: ${{ github.actor }}
      TF_VAR_git_fluxrepo: flux-demo
      ARM_SUBSCRIPTION_ID: ${{  secrets.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{  secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{  secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{  secrets.ARM_TENANT_ID }}

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          ref: master

      - name: "Terraform Setup"
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.25
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: "Terraform Init"
        run: terraform init -backend-config=backend-repro.hcl
        working-directory: ./src/dev

      - name: "Terraform Format"
        run: terraform fmt -check
        working-directory: ./src/dev

      - name: "Terraform Plan"
        run: terraform plan -no-color
        working-directory: ./src/dev

      - if: github.event.action == 'labeled'
        name: "Terraform Apply"
        run: terraform apply -auto-approve
        working-directory: ./src/dev

      - name: "Azure Login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - if: github.event.action == 'labeled'
        name: "Update mode of AKS Nodepools"
        uses: azure/CLI@v1
        with:
          azcliversion: 2.5.1
          inlineScript: |
            az aks nodepool update -g ${{ env.TF_VAR_aks_cluster_rg }} --cluster-name ${{ env.TF_VAR_aks_cluster_name }} -n system --mode system
            az aks nodepool update -g ${{ env.TF_VAR_aks_cluster_rg }} --cluster-name ${{ env.TF_VAR_aks_cluster_name }} -n default --mode user

      - if: github.event.action == 'labeled'
        name: "Setup kubectl"
        uses: azure/setup-kubectl@v1
        with:
          version: "v1.18.2"

      - if: github.event.action == 'labeled'
        name: "Setup aks context"
        uses: azure/aks-set-context@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          resource-group: ${{ env.TF_VAR_aks_cluster_rg }}
          cluster-name: ${{ env.TF_VAR_aks_cluster_name }}

      - if: github.event.action == 'labeled'
        name: "Patch nodeSelecter for system deployments & restart deployments"
        run: |
          ./src/scripts/update-nodeselecter-system-deployments.sh
          ./src/scripts/restart-system-deployments.sh

      - if: github.event.action == 'unlabeled'
        name: "Update mode of AKS Nodepools for deletion"
        uses: azure/CLI@v1
        with:
          azcliversion: 2.5.1
          inlineScript: |
            az aks nodepool update -g ${{ env.TF_VAR_aks_cluster_rg }} --cluster-name ${{ env.TF_VAR_aks_cluster_name }} -n default --mode system

      - if: github.event.action == 'unlabeled'
        name: "Terraform Destroy"
        run: terraform destroy -auto-approve
        working-directory: ./src/dev
